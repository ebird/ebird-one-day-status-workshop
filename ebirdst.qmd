---
output: html_document
editor:
    mode: source
editor_options: 
  chunk_output_type: console
---

# eBird Status Data Products {#sec-ebirdst}

The [eBird Status and Trends](https://science.ebird.org/en/status-and-trends) project uses full-annual cycle machine-learning models combining eBird data with remote-sensing data and accounting for variation in observer behavior and effort to produce high resolution, weekly estimates of range boundaries, occurrence rate, and relative abundance of bird species. As of November 2023, results for 2,424 species globally are available. Interactive visualizations for these species are available through the [eBird Status and Trends website](https://science.ebird.org/en/status-and-trends) and the eBird Status Data Products are available through the R package [`ebirdst`](https://ebird.github.io/ebirdst/).

This workshop will introduce attendees to the eBird Status Data Products and the `ebirdst` R package developed specifically for working with these data. We will introduce attendees to the range of available data and how to download these data products. We'll work through a series of applications that demonstrate real-world uses of the data products and teach users about the structure of the data and the package along the way. Let's start by loading the packages we'll use throughout this workshop.

```{r}
#| label: ebirdst-packages
library(dplyr)
library(ebirdst)
library(exactextractr)
library(forcats)
library(ggplot2)
library(readr)
library(sf)
library(stringr)
library(terra)
library(tidyr)
```

## Data access {#sec-ebirdst-access}

Access to the eBird Status Data Products is granted through an Access Request Form at: <https://ebird.org/st/request>. The terms of use have been designed to be quite permissive in many cases, particularly academic and research use. After reading the [eBird Status and Trends Products Terms of Use](https://ebird.org/science/status-and-trends/st-data-access-terms-of-use/) and filling out the [Access Request Form](https://ebird.org/st/request) you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the `ebirdst` package, run the following (replacing `"XXXXXXXXX"` with your actual key):

```{r}
#| label: ebirdst-access-key
#| eval: false
#set_ebirdst_access_key("XXXXXXXXX")
```

Then immediately **restart R**. This will save the access key as the environment variable `EBIRDST_KEY` in your `.Renviron` file so it's accessible within your R session.

::: callout-important
## Checkpoint

To ensure your data access key is working, attempt run the following code, which will download a single small file. Speak to the instructor if this doesn't work.

```{r}
#| label: ebirdst-access-sol
#| eval: false

ebirdst_download_status("scamyz1", pattern = "abundance_median_27km", 
                        force = TRUE)
```
:::

## Status species {#sec-ebirdst-species}

The `ebirdst_runs` object is a data frame listing all the available species:

```{r species}
#| label: ebirdst-species-runs
glimpse(ebirdst_runs)
```

If you're working in RStudio, you can use `View()` to interactively explore this data frame. You can also consult the [Status and Trends species page](https://science.ebird.org/en/status-and-trends/species) the full list of available species. On this page you can also filter by region, for example to see only those species with some portion of their range [falling within Australia](https://science.ebird.org/en/status-and-trends/species?regionCode=AU).

## Downloading data {#sec-ebirdst-download}

The function `ebirdst_download_status()` downloads data for a single species given a species name (common name, scientific name, or species code). The full data package for each species contains a large number of files, many of which may be unnecessary for your application. You can use the `dry_run = TRUE` and `download_all = TRUE` arguments to `ebirdst_download_status()` to list the available files without downloading them.

```{r}
#| label: ebirdst-download-specific-dryrun
ebirdst_download_status("Scarlet Myzomela", download_all = TRUE, dry_run = TRUE)
```

Within the data package directory, the primary files are organized according to the following structure:

-   `weekly/`: a directory containing weekly estimates of relative abundance and proportion of population on a regular grid in GeoTIFF format at three resolutions. See below for more details.
-   `seasonal/`: a directory containing seasonal estimates of relative abundance and proportion of population on a regular grid in GeoTIFF format at three resolutions. These are derived from the corresponding weekly raster data. Dates defining the boundary of each season are set on a species-specific basis by an expert reviewer familiar with the species. These dates are available in the `ebirdst_runs` data frame. Only seasons that passed the expert review process are included. See below for more details.
-   `config.json`: run-specific parameters, mostly for internal use, but also containing useful parameters for mapping the abundance data.

All predictions are made on a standard 2.96km x 2.96km global grid, however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:

-   High resolution (`3km`): the native 2.96 km resolution data
-   Medium resolution (`9km`): the high resolution data aggregated by a factor of 3 in each direction resulting in a resolution of 8.89 km
-   Low resolution (`27km`): the high resolution data aggregated by a factor of 9 in each direction resulting in a resolution of 26.7 km

The `ebirdst_download_status()` function has been designed with a number of parameters that make it easy to choose what specific data products to download. For the sake of speed in the workshop, we're going to use the function default to only download relative abundance and proportion of population. To learn more about downloading additional specific data products, load the help for the function with `?ebirdst::ebirdst_download_status`.

To download the data for Scarlet Myzomela use:

```{r}
#| label: ebirdst-download-fake
#| eval: false
ebirdst_download_status(species = "Scarlet Myzomela")
```

The function will automatically identify a suitable location to store the downloaded data.

::: callout-tip
## Tip

To avoid any issues resulting from all participants downloading data over a slow internet connection at the same time, for the remainder of this lesson we'll use data included in the [data package for this workshop](index.qmd#sec-intro-setup-data). To confirm the data are in the correct location, let's load a raster file with the path defined. Note: to keep the file sizes small and the analysis fast, the data package has not included the highest resolution 3km data. If you would like to work with that resolution, you'll need to run the download function for these species on your own.

```{r}
#| label: ebirdst-load-path
test_raster <- load_raster("Scarlet Myzomela", product = "abundance", 
                           period = "seasonal", path = "data/ebirdst-data", 
                           resolution = "9km")
test_raster

```

However, when working with eBird Status data products after this workshop, it's best to use the standard download location and skip adding `path = "data/ebirdst-data/"` to function calls.
:::

## Applications {#sec-ebirdst-applications}

The core of the workshop will work through three example applications using the eBird Status data products as a way to understand practical applications and learn about the data structure and R package:

1.  [Trajectories](#sec-ebirdst-applications-trajectories): chart the change in the proportion of the population in a region throughout the year for a set of species.
2.  [Regional statistics](#sec-ebirdst-applications-stats): calculate the proportion of the breeding population falling within protected areas for a set of species.
3.  [Prioritization](#sec-ebirdst-applications-prioritization): use eBird Status data products to identify important sites for protection of a set of species.

### Trajectories {#sec-ebirdst-applications-trajectories}

In this application, we'll look at the change in for populations for two species throughout the year in Queensland, Australia. We'll consider Scarlet Myzomela and Leaden Flycatcher, two migrant species that are mostly endemic to Australia (data for both species are in the workshop data package). When comparing multiple species, or a single species between different seasons, as is the case here, it's important to consider the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and species.

Let's start by using the `load_raster()` function to load the weekly proportion of population data for these species. We'll also load a boundary polygon for Queensland. eBird Status Data Products that are in grid or raster format come in three spatial resolutions: 3 km (the original fine scale of prediction), 9 km (aggregated once), and 27 km (a second aggregation). Which resolution to use depends on use case and performance. The 27 km data will be fastest to work with, but provide the least resolution. Here we'll work with the 9 km resolution as a trade off of resolution for speed in the workshop.

```{r}
#| label: ebirdst-applications-trajectories-data
# proportion of population cubes

pop1 <- load_raster("Scarlet Myzomela", product = "proportion-population", 
                    period = "weekly", resolution = "9km", path = "data/ebirdst-data/")

pop2 <- load_raster("Leaden Flycatcher", product = "proportion-population", 
                    period = "weekly", resolution = "9km", path = "data/ebirdst-data/")

# Queensland boundary, projected to match the raster data
qld <- read_sf("data/gis-data.gpkg", "regions") %>% 
  filter(state_code == "AU-QLD") %>% 
  st_transform(crs = crs(pop1))
```

Now, we'll use the R package `exactextractr` to calculate the sum of the proportions for each species within Queensland.

```{r}
#| label: ebirdst-applications-trajectories-summarize
# sum within Queensland
# Scarlet Myzomela
traj1 <- exact_extract(pop1, qld, fun = "sum")
traj1 <- data.frame(species = "Scarlet Myzomela", 
                    week = as.Date(names(pop1)),
                    prop_pop = as.numeric(traj1[1, ]))

# Leaden Flycatcher
traj2 <- exact_extract(pop2, qld, fun = "sum")
traj2 <- data.frame(species = "Leaden Flycatcher",
                    week = as.Date(names(pop2)),
                    prop_pop = as.numeric(traj2[1, ]))

# combine
trajectories <- bind_rows(traj1, traj2)
head(trajectories)
```

Finally we can plot the trajectories.

```{r}
#| label: ebirdst-applications-trajectories-plot
ggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +
  geom_line() +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "Week", 
       y = "% of population",
       title = "Weekly proportion of population trajectory",
       color = NULL) +
  theme_bw() +
  theme(legend.position = "bottom")
```

### Regional statistics {#sec-ebirdst-applications-stats}

For this application, we calculate the proportion of the population within protected areas in Queensland for a set of species. As an example species group, we'll use a set of 12 species that are mostly endemic to eastern Australia. For migratory species we’ll focus on the breeding season.

```{r}
#| label: ebirdst-applications-stats
species_list <- c("yefhon1", "easspi1", "scamyz1", "blfmon1", "railor5",
                  "yelrob1", "bruwat1", "belmin1", "ytbcoc1", "scblor1",
                  "broger1", "cresht1")

# add common names, migrant/resident status, and quality
species_list <- filter(ebirdst_runs, species_code %in% species_list) %>% 
  mutate(quality = ifelse(is_resident, resident_quality, breeding_quality)) %>% 
  select(species_code, common_name, is_resident, quality)
print(species_list)
```

We have five migrants and nine resident species. Notice that `r sum(species_list$quality == 1)` of these species had a quality rating of 1 indicating that caution should be exercised when using the results. For real world use you should examine the relative abundance maps for errors prior to using them for analysis; however, for this example, we'll use this species list as is. We'll load and combine the breeding (for migrants) and resident (for residents) proportion of population layers for this list of species. Data for all of these species has been included in the workshop data package.

::: callout-tip
## Tip

Relative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it's critical to always use the proportion of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.
:::

```{r}
#| label: ebirdst-applications-pop
# loop over the species list extracting the seasonal proportion of population
prop_population <- list()
for (i in seq_len(nrow(species_list))) {
  # load the seasonal cube for this species
  this_sp <- species_list[i, ]
  
  pop <- load_raster(this_sp$species_code, product = "proportion-population", 
                     period = "seasonal", resolution = "9km", 
                     path = "data/ebirdst-data/")
  
  # subset to the layer we need: breeding or resident
  pop <- pop[[ifelse(this_sp$is_resident, "resident", "breeding")]]
  prop_population[[this_sp$species_code]] <- pop
}

# stack the rasters into a single object
prop_population <- rast(prop_population)
```

The GIS data available in the workshop data package contains polygon boundaries for the National Reserve System, subset to Queensland, from the Collaborative Australian Protected Areas Database (CAPAD). Let's load them now and project to match the raster layers. For this example, we'll combine all the protected area polygons together into one feature; however, this analysis could be modified to consider how the distribution of species varies between protected areas.

```{r}
#| label: ebirdst-applications-protected
protected <- read_sf("data/capad2022.gpkg") %>% 
  filter(STATE == "QLD") %>%
  st_combine() %>% 
  st_transform(crs = crs(prop_population))
```

Finally, we can use `exactextracr` to calculate the total percent of population within protected areas for each species.

```{r}
#| label: ebirdst-applications-ee
percent_protected <- exact_extract(prop_population, protected, fun = "sum")
percent_protected <- as.numeric(percent_protected[1, ])
percent_protected <- data.frame(species_code = species_list$species_code,
                                common_name = species_list$common_name,
                                percent_population = percent_protected) %>% 
  arrange(desc(percent_population))
print(percent_protected)

# plot the data
ggplot(percent_protected) +
  aes(x = fct_reorder(common_name, percent_population),
      y = percent_population) +
  geom_col(aes(fill = percent_population)) +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_viridis_b() +
  labs(x = NULL, y = "Percent of population in protected areas") +
  coord_flip() +
  theme_bw() +
  theme(legend.position = "none")
```

### Prioritization {#sec-ebirdst-applications-prioritization}

For the final application, we'll perform a multi-species site prioritization exercise, identifying important sites for protecting the set of species we identified in the previous application. Let's start by generating a multi-species importance layer by calculating the mean percent of population across all selected species. Since we're focused on identifying sites in Queensland, we'll also crop and mask the importance layer.

```{r}
#| label: ebirdst-applications-prioritization-import
# importance: mean proportion of population across species
# fill missing values with zeros prior to averaging
importance <- ifel(is.na(prop_population), 0, prop_population) %>% 
  mean(na.rm = TRUE) %>% 
  # using the spatial data from above to crop and mask
  crop(qld) %>% 
  mask(qld)

# plot the square root of importance since the data are right skewed
par(mar = c(0.25, 0.25, 0.25, 0.25))
crs <- "+proj=laea +lon_0=146.95 +lat_0=-19.15 +datum=WGS84 +units=m +no_defs"
r_plot <- sqrt(importance) %>% 
  project(crs, method = "near") %>% 
  trim()
plot(r_plot, axes = FALSE)
```

The absolute numbers in this map are challenging to interpret (they're the mean proportion of the population across the species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of species.

This is application so far, we have examined existing protected areas. For the sake of comparison, let's imagine we want to identify the most important sites in eastern Australia that cover the same area as the existing protected area network. What proportion of Australia does the current protected area network cover?

```{r}
#| label: ebirdst-applications-prioritization-area
# proportion of queensland in existing protected area network
area_aus_qld <- sum(st_area(qld))

protected_qld <- read_sf("data/capad2022.gpkg") %>%
  filter(STATE %in% c("QLD") & 
           IUCN %in% c("Ia", "Ib", "II", "III", "IV")) %>%
  st_combine() %>% 
  st_transform(crs = crs(prop_population))

area_aus_qld_protected <- protected_qld %>%
  st_area()

proportion_protected <- as.numeric(area_aus_qld_protected / area_aus_qld)
print(proportion_protected)
```

So, `r scales::percent(proportion_protected, 0.1)` of eastern Australia is covered by the existing network of protected areas. Let's identify the top `r scales::percent(proportion_protected, 0.1)` most important raster cells from the multi-species importance layer.

```{r}
#| label: ebirdst-applications-prioritization-top
# identify the quantile corresponding to the desired protection level
q <- global(importance, fun = quantile, 
            probs = 1 - proportion_protected, na.rm = TRUE) %>% 
  as.numeric()
# identify the most importance cells
selected_sites <- as.numeric(importance >= q)
```

Let's compare maps of the existing protected area network and the sites selected using eBird Status and Trends.

```{r}
#| label: ebirdst-applications-prioritization-maps
par(mar = c(0.25, 0.25, 0.25, 0.25))

# high importance
r_plot <- project(selected_sites, crs, method = "near") %>% 
  trim()
protected_proj <- st_transform(protected_qld, crs = crs) %>% 
  st_geometry()
plot(r_plot, axes = FALSE, legend = FALSE)

# existing
plot(st_simplify(protected_proj), 
     col = "#00000088", border = NA,
     add = TRUE)
```

The high importance sites we identified are shown in green, while the existing protected area network is overlaid in grey. It appears the existing protected area network is doing a better job in northern Queensland than in southeast Queensland for these species. This might not be surprising since the location of existing protected areas was not chosen specifically to protect these species. Let's quantify what proportion of the population these two regions capture.

```{r}
#| label: ebirdst-applications-prioritization-compare
# mask the proportion of population layers by the selected sites
selected_pp <- prop_population %>% 
  crop(selected_sites) %>% 
  mask(selected_sites, maskvalues = c(0, NA))
# calculate total percent of population within proposed sites
percent_selected <- global(selected_pp, fun = "sum", na.rm = TRUE)
percent_selected <- data.frame(species_code = names(selected_pp),
                               selected_percent = percent_selected[, 1])

# combine with values for existing network
comparison <- inner_join(percent_protected, percent_selected,
                         by = "species_code") %>% 
  rename(existing_network = percent_population,
         prioritized_sites = selected_percent) %>% 
  pivot_longer(cols = c(existing_network, prioritized_sites),
               names_to = "network_type",
               values_to = "percent_population")

# plot the data
ggplot(comparison) +
  aes(x = fct_reorder(common_name, percent_population),
      y = percent_population,
      group = network_type,
      fill = network_type) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_brewer(palette = "Set1") +
  labs(x = NULL, 
       y = "Percent of population in protected areas",
       fill = NULL) +
  coord_flip() +
  theme(legend.position = "bottom")
```

So, for the same total area, we could capture a much larger proportion of the populations of these species if we use eBird Status data products for these species in our site prioritization. This example is, of course, overly simplistic. For example, in a real world application, different sites have different costs associated with protection and you would want to account for that during prioritization. For more complex prioritization problems, systematic conservation planning tools like the R package [`prioritizr`](https://prioritizr.net/) can be used effectively with eBird Status data products.
