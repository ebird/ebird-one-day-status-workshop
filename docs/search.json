[
  {
    "objectID": "ebirdst.html#sec-ebirdst-access",
    "href": "ebirdst.html#sec-ebirdst-access",
    "title": "1  eBird Status Data Products",
    "section": "1.1 Data access",
    "text": "1.1 Data access\nAccess to the eBird Status Data Products is granted through an Access Request Form at: https://ebird.org/st/request. The terms of use have been designed to be quite permissive in many cases, particularly academic and research use. After reading the eBird Status and Trends Products Terms of Use and filling out the Access Request Form you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the ebirdst package, run the following (replacing \"XXXXXXXXX\" with your actual key):\n\n#set_ebirdst_access_key(\"XXXXXXXXX\")\n\nThen immediately restart R. This will save the access key as the environment variable EBIRDST_KEY in your .Renviron file so it’s accessible within your R session.\n\n\n\n\n\n\nCheckpoint\n\n\n\nTo ensure your data access key is working, attempt run the following code, which will download a single small file. Speak to the instructor if this doesn’t work.\n\nebirdst_download_status(\"scamyz1\", pattern = \"abundance_median_27km\", \n                        force = TRUE)"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-species",
    "href": "ebirdst.html#sec-ebirdst-species",
    "title": "1  eBird Status Data Products",
    "section": "1.2 Status species",
    "text": "1.2 Status species\nThe ebirdst_runs object is a data frame listing all the available species:\n\nglimpse(ebirdst_runs)\n#&gt; Rows: 1,113\n#&gt; Columns: 28\n#&gt; $ species_code                   &lt;chr&gt; \"abetow\", \"acafly\", \"acowoo\", \"affeag1\"…\n#&gt; $ scientific_name                &lt;chr&gt; \"Melozone aberti\", \"Empidonax virescens…\n#&gt; $ common_name                    &lt;chr&gt; \"Abert's Towhee\", \"Acadian Flycatcher\",…\n#&gt; $ is_resident                    &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, F…\n#&gt; $ breeding_quality               &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ breeding_start                 &lt;date&gt; NA, 2022-05-24, NA, NA, 2022-06-21, NA…\n#&gt; $ breeding_end                   &lt;date&gt; NA, 2022-08-02, NA, NA, 2022-07-12, NA…\n#&gt; $ nonbreeding_quality            &lt;chr&gt; NA, \"3\", NA, NA, \"1\", NA, \"1\", \"3\", NA,…\n#&gt; $ nonbreeding_start              &lt;date&gt; NA, 2022-12-06, NA, NA, 2022-11-15, NA…\n#&gt; $ nonbreeding_end                &lt;date&gt; NA, 2022-02-15, NA, NA, 2022-03-29, NA…\n#&gt; $ postbreeding_migration_quality &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ postbreeding_migration_start   &lt;date&gt; NA, 2022-08-09, NA, NA, 2022-07-19, NA…\n#&gt; $ postbreeding_migration_end     &lt;date&gt; NA, 2022-11-29, NA, NA, 2022-11-08, NA…\n#&gt; $ prebreeding_migration_quality  &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"2\", \"3\", NA,…\n#&gt; $ prebreeding_migration_start    &lt;date&gt; NA, 2022-02-22, NA, NA, 2022-04-05, NA…\n#&gt; $ prebreeding_migration_end      &lt;date&gt; NA, 2022-05-17, NA, NA, 2022-06-14, NA…\n#&gt; $ resident_quality               &lt;chr&gt; \"3\", NA, \"3\", \"2\", NA, \"2\", NA, NA, \"3\"…\n#&gt; $ resident_start                 &lt;date&gt; 2022-01-04, NA, 2022-01-04, 2022-01-04…\n#&gt; $ resident_end                   &lt;date&gt; 2022-12-27, NA, 2022-12-27, 2022-12-27…\n#&gt; $ has_trends                     &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FA…\n#&gt; $ trends_season                  &lt;chr&gt; \"resident\", \"breeding\", \"resident\", NA,…\n#&gt; $ trends_region                  &lt;chr&gt; \"north_america\", \"north_america\", \"nort…\n#&gt; $ trends_start_year              &lt;dbl&gt; 2012, 2012, 2011, NA, 2012, 2015, NA, 2…\n#&gt; $ trends_end_year                &lt;dbl&gt; 2022, 2022, 2021, NA, 2022, 2022, NA, 2…\n#&gt; $ trends_start_date              &lt;chr&gt; \"01-25\", \"05-24\", \"11-01\", NA, \"06-21\",…\n#&gt; $ trends_end_date                &lt;chr&gt; \"05-10\", \"08-02\", \"05-03\", NA, \"07-12\",…\n#&gt; $ rsquared                       &lt;dbl&gt; 0.923, 0.857, 0.881, NA, 0.787, 0.820, …\n#&gt; $ beta0                          &lt;dbl&gt; -0.01392, 0.68942, -0.09267, NA, -0.162…\n\nIf you’re working in RStudio, you can use View() to interactively explore this data frame. You can also consult the Status and Trends species page the full list of available species. On this page you can also filter by region, for example to see only those species with some portion of their range falling within Australia."
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-download",
    "href": "ebirdst.html#sec-ebirdst-download",
    "title": "1  eBird Status Data Products",
    "section": "1.3 Downloading data",
    "text": "1.3 Downloading data\nThe function ebirdst_download_status() downloads data for a single species given a species name (common name, scientific name, or species code). The full data package for each species contains a large number of files, many of which may be unnecessary for your application. You can use the dry_run = TRUE and download_all = TRUE arguments to ebirdst_download_status() to list the available files without downloading them.\n\nebirdst_download_status(\"Scarlet Myzomela\", download_all = TRUE, dry_run = TRUE)\n\nWithin the data package directory, the primary files are organized according to the following structure:\n\nweekly/: a directory containing weekly estimates of relative abundance and proportion of population on a regular grid in GeoTIFF format at three resolutions. See below for more details.\nseasonal/: a directory containing seasonal estimates of relative abundance and proportion of population on a regular grid in GeoTIFF format at three resolutions. These are derived from the corresponding weekly raster data. Dates defining the boundary of each season are set on a species-specific basis by an expert reviewer familiar with the species. These dates are available in the ebirdst_runs data frame. Only seasons that passed the expert review process are included. See below for more details.\nconfig.json: run-specific parameters, mostly for internal use, but also containing useful parameters for mapping the abundance data.\n\nAll predictions are made on a standard 2.96km x 2.96km global grid, however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:\n\nHigh resolution (3km): the native 2.96 km resolution data\nMedium resolution (9km): the high resolution data aggregated by a factor of 3 in each direction resulting in a resolution of 8.89 km\nLow resolution (27km): the high resolution data aggregated by a factor of 9 in each direction resulting in a resolution of 26.7 km\n\nThe ebirdst_download_status() function has been designed with a number of parameters that make it easy to choose what specific data products to download. For the sake of speed in the workshop, we’re going to use the function default to only download relative abundance and proportion of population. To learn more about downloading additional specific data products, load the help for the function with ?ebirdst::ebirdst_download_status.\nTo download the data for Scarlet Myzomela use:\n\nebirdst_download_status(species = \"Scarlet Myzomela\")\n\nThe function will automatically identify a suitable location to store the downloaded data.\n\n\n\n\n\n\nTip\n\n\n\nTo avoid any issues resulting from all participants downloading data over a slow internet connection at the same time, for the remainder of this lesson we’ll use data included in the data package for this workshop. To confirm the data are in the correct location, let’s load a raster file with the path defined. Note: to keep the file sizes small and the analysis fast, the data package has not included the highest resolution 3km data. If you would like to work with that resolution, you’ll need to run the download function for these species on your own.\n\ntest_raster &lt;- load_raster(\"Scarlet Myzomela\", product = \"abundance\", \n                           period = \"seasonal\", path = \"data/ebirdst-data\", \n                           resolution = \"9km\")\ntest_raster\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : scamyz1_abundance_seasonal_mean_9km_2022.tif \n#&gt; names       : breeding, nonbreeding, prebree~gration, postbre~gration \n#&gt; min values  :     0.00,        0.00,             0.0,            0.00 \n#&gt; max values  :     1.66,        4.25,             2.9,            4.53\n\nHowever, when working with eBird Status data products after this workshop, it’s best to use the standard download location and skip adding path = \"data/ebirdst-data/\" to function calls."
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-applications",
    "href": "ebirdst.html#sec-ebirdst-applications",
    "title": "1  eBird Status Data Products",
    "section": "1.4 Applications",
    "text": "1.4 Applications\nThe core of the workshop will work through three example applications using the eBird Status data products as a way to understand practical applications and learn about the data structure and R package:\n\nTrajectories: chart the change in the proportion of the population in a region throughout the year for a set of species.\nRegional statistics: calculate the proportion of the breeding population falling within protected areas for a set of species.\nPrioritization: use eBird Status data products to identify important sites for protection of a set of species.\n\n\n1.4.1 Trajectories\nIn this application, we’ll look at the change in for populations for two species throughout the year in Queensland, Australia. We’ll consider Scarlet Myzomela and Leaden Flycatcher, two migrant species that are mostly endemic to Australia (data for both species are in the workshop data package). When comparing multiple species, or a single species between different seasons, as is the case here, it’s important to consider the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and species.\nLet’s start by using the load_raster() function to load the weekly proportion of population data for these species. We’ll also load a boundary polygon for Queensland. eBird Status Data Products that are in grid or raster format come in three spatial resolutions: 3 km (the original fine scale of prediction), 9 km (aggregated once), and 27 km (a second aggregation). Which resolution to use depends on use case and performance. The 27 km data will be fastest to work with, but provide the least resolution. Here we’ll work with the 9 km resolution as a trade off of resolution for speed in the workshop.\n\n# proportion of population cubes\n\npop1 &lt;- load_raster(\"Scarlet Myzomela\", product = \"proportion-population\", \n                    period = \"weekly\", resolution = \"9km\", path = \"data/ebirdst-data/\")\n\npop2 &lt;- load_raster(\"Leaden Flycatcher\", product = \"proportion-population\", \n                    period = \"weekly\", resolution = \"9km\", path = \"data/ebirdst-data/\")\n\n# Queensland boundary, projected to match the raster data\nqld &lt;- read_sf(\"data/gis-data.gpkg\", \"regions\") %&gt;% \n  filter(state_code == \"AU-QLD\") %&gt;% \n  st_transform(crs = crs(pop1))\n\nNow, we’ll use the R package exactextractr to calculate the sum of the proportions for each species within Queensland.\n\n# sum within Queensland\n# Scarlet Myzomela\ntraj1 &lt;- exact_extract(pop1, qld, fun = \"sum\")\ntraj1 &lt;- data.frame(species = \"Scarlet Myzomela\", \n                    week = as.Date(names(pop1)),\n                    prop_pop = as.numeric(traj1[1, ]))\n\n# Leaden Flycatcher\ntraj2 &lt;- exact_extract(pop2, qld, fun = \"sum\")\ntraj2 &lt;- data.frame(species = \"Leaden Flycatcher\",\n                    week = as.Date(names(pop2)),\n                    prop_pop = as.numeric(traj2[1, ]))\n\n# combine\ntrajectories &lt;- bind_rows(traj1, traj2)\nhead(trajectories)\n#&gt;            species       week prop_pop\n#&gt; 1 Scarlet Myzomela 2022-01-04    0.311\n#&gt; 2 Scarlet Myzomela 2022-01-11    0.326\n#&gt; 3 Scarlet Myzomela 2022-01-18    0.417\n#&gt; 4 Scarlet Myzomela 2022-01-25    0.452\n#&gt; 5 Scarlet Myzomela 2022-02-01    0.470\n#&gt; 6 Scarlet Myzomela 2022-02-08    0.556\n\nFinally we can plot the trajectories.\n\nggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Week\", \n       y = \"% of population\",\n       title = \"Weekly proportion of population trajectory\",\n       color = NULL) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n1.4.2 Regional statistics\nFor this application, we calculate the proportion of the population within protected areas in Queensland for a set of species. As an example species group, we’ll use a set of 12 species that are mostly endemic to eastern Australia. For migratory species we’ll focus on the breeding season.\n\nspecies_list &lt;- c(\"yefhon1\", \"easspi1\", \"scamyz1\", \"blfmon1\", \"railor5\",\n                  \"yelrob1\", \"bruwat1\", \"belmin1\", \"ytbcoc1\", \"scblor1\",\n                  \"broger1\", \"cresht1\")\n\n# add common names, migrant/resident status, and quality\nspecies_list &lt;- filter(ebirdst_runs, species_code %in% species_list) %&gt;% \n  mutate(quality = ifelse(is_resident, resident_quality, breeding_quality)) %&gt;% \n  select(species_code, common_name, is_resident, quality)\nprint(species_list)\n#&gt; # A tibble: 12 × 4\n#&gt;   species_code common_name         is_resident quality\n#&gt;   &lt;chr&gt;        &lt;chr&gt;               &lt;lgl&gt;       &lt;chr&gt;  \n#&gt; 1 belmin1      Bell Miner          TRUE        2      \n#&gt; 2 blfmon1      Black-faced Monarch FALSE       3      \n#&gt; 3 broger1      Brown Gerygone      TRUE        3      \n#&gt; 4 bruwat1      Little Wattlebird   TRUE        3      \n#&gt; 5 cresht1      Eastern Shrike-tit  TRUE        1      \n#&gt; 6 easspi1      Eastern Spinebill   FALSE       3      \n#&gt; # ℹ 6 more rows\n\nWe have five migrants and nine resident species. Notice that 1 of these species had a quality rating of 1 indicating that caution should be exercised when using the results. For real world use you should examine the relative abundance maps for errors prior to using them for analysis; however, for this example, we’ll use this species list as is. We’ll load and combine the breeding (for migrants) and resident (for residents) proportion of population layers for this list of species. Data for all of these species has been included in the workshop data package.\n\n\n\n\n\n\nTip\n\n\n\nRelative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it’s critical to always use the proportion of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.\n\n\n\n# loop over the species list extracting the seasonal proportion of population\nprop_population &lt;- list()\nfor (i in seq_len(nrow(species_list))) {\n  # load the seasonal cube for this species\n  this_sp &lt;- species_list[i, ]\n  \n  pop &lt;- load_raster(this_sp$species_code, product = \"proportion-population\", \n                     period = \"seasonal\", resolution = \"9km\", \n                     path = \"data/ebirdst-data/\")\n  \n  # subset to the layer we need: breeding or resident\n  pop &lt;- pop[[ifelse(this_sp$is_resident, \"resident\", \"breeding\")]]\n  prop_population[[this_sp$species_code]] &lt;- pop\n}\n\n# stack the rasters into a single object\nprop_population &lt;- rast(prop_population)\n\nThe GIS data available in the workshop data package contains polygon boundaries for the National Reserve System, subset to Queensland, from the Collaborative Australian Protected Areas Database (CAPAD). Let’s load them now and project to match the raster layers. For this example, we’ll combine all the protected area polygons together into one feature; however, this analysis could be modified to consider how the distribution of species varies between protected areas.\n\nprotected &lt;- read_sf(\"data/capad2022.gpkg\") %&gt;% \n  filter(STATE == \"QLD\") %&gt;%\n  st_combine() %&gt;% \n  st_transform(crs = crs(prop_population))\n\nFinally, we can use exactextracr to calculate the total percent of population within protected areas for each species.\n\npercent_protected &lt;- exact_extract(prop_population, protected, fun = \"sum\")\npercent_protected &lt;- as.numeric(percent_protected[1, ])\npercent_protected &lt;- data.frame(species_code = species_list$species_code,\n                                common_name = species_list$common_name,\n                                percent_population = percent_protected) %&gt;% \n  arrange(desc(percent_population))\nprint(percent_protected)\n#&gt;    species_code                  common_name percent_population\n#&gt; 1       railor5             Rainbow Lorikeet            0.14046\n#&gt; 2       scblor1      Scaly-breasted Lorikeet            0.10064\n#&gt; 3       broger1               Brown Gerygone            0.08406\n#&gt; 4       blfmon1          Black-faced Monarch            0.08291\n#&gt; 5       scamyz1             Scarlet Myzomela            0.07773\n#&gt; 6       belmin1                   Bell Miner            0.05049\n#&gt; 7       yelrob1         Eastern Yellow Robin            0.03767\n#&gt; 8       bruwat1            Little Wattlebird            0.01492\n#&gt; 9       easspi1            Eastern Spinebill            0.01296\n#&gt; 10      yefhon1      Yellow-faced Honeyeater            0.01189\n#&gt; 11      cresht1           Eastern Shrike-tit            0.00967\n#&gt; 12      ytbcoc1 Yellow-tailed Black-Cockatoo            0.00867\n\n# plot the data\nggplot(percent_protected) +\n  aes(x = fct_reorder(common_name, percent_population),\n      y = percent_population) +\n  geom_col(aes(fill = percent_population)) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_viridis_b() +\n  labs(x = NULL, y = \"Percent of population in protected areas\") +\n  coord_flip() +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n1.4.3 Prioritization\nFor the final application, we’ll perform a multi-species site prioritization exercise, identifying important sites for protecting the set of species we identified in the previous application. Let’s start by generating a multi-species importance layer by calculating the mean percent of population across all selected species. Since we’re focused on identifying sites in Queensland, we’ll also crop and mask the importance layer.\n\n# importance: mean proportion of population across species\n# fill missing values with zeros prior to averaging\nimportance &lt;- ifel(is.na(prop_population), 0, prop_population) %&gt;% \n  mean(na.rm = TRUE) %&gt;% \n  # using the spatial data from above to crop and mask\n  crop(qld) %&gt;% \n  mask(qld)\n\n# plot the square root of importance since the data are right skewed\npar(mar = c(0.25, 0.25, 0.25, 0.25))\ncrs &lt;- \"+proj=laea +lon_0=146.95 +lat_0=-19.15 +datum=WGS84 +units=m +no_defs\"\nr_plot &lt;- sqrt(importance) %&gt;% \n  project(crs, method = \"near\") %&gt;% \n  trim()\nplot(r_plot, axes = FALSE)\n\n\n\n\n\n\n\n\nThe absolute numbers in this map are challenging to interpret (they’re the mean proportion of the population across the species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of species.\nThis is application so far, we have examined existing protected areas. For the sake of comparison, let’s imagine we want to identify the most important sites in eastern Australia that cover the same area as the existing protected area network. What proportion of Australia does the current protected area network cover?\n\n# proportion of queensland in existing protected area network\narea_aus_qld &lt;- sum(st_area(qld))\n\nprotected_qld &lt;- read_sf(\"data/capad2022.gpkg\") %&gt;%\n  filter(STATE %in% c(\"QLD\") & \n           IUCN %in% c(\"Ia\", \"Ib\", \"II\", \"III\", \"IV\")) %&gt;%\n  st_combine() %&gt;% \n  st_transform(crs = crs(prop_population))\n\narea_aus_qld_protected &lt;- protected_qld %&gt;%\n  st_area()\n\nproportion_protected &lt;- as.numeric(area_aus_qld_protected / area_aus_qld)\nprint(proportion_protected)\n#&gt; [1] 0.072\n\nSo, 7.2% of eastern Australia is covered by the existing network of protected areas. Let’s identify the top 7.2% most important raster cells from the multi-species importance layer.\n\n# identify the quantile corresponding to the desired protection level\nq &lt;- global(importance, fun = quantile, \n            probs = 1 - proportion_protected, na.rm = TRUE) %&gt;% \n  as.numeric()\n# identify the most importance cells\nselected_sites &lt;- as.numeric(importance &gt;= q)\n\nLet’s compare maps of the existing protected area network and the sites selected using eBird Status and Trends.\n\npar(mar = c(0.25, 0.25, 0.25, 0.25))\n\n# high importance\nr_plot &lt;- project(selected_sites, crs, method = \"near\") %&gt;% \n  trim()\nprotected_proj &lt;- st_transform(protected_qld, crs = crs) %&gt;% \n  st_geometry()\nplot(r_plot, axes = FALSE, legend = FALSE)\n\n# existing\nplot(st_simplify(protected_proj), \n     col = \"#00000088\", border = NA,\n     add = TRUE)\n\n\n\n\n\n\n\n\nThe high importance sites we identified are shown in green, while the existing protected area network is overlaid in grey. It appears the existing protected area network is doing a better job in northern Queensland than in southeast Queensland for these species. This might not be surprising since the location of existing protected areas was not chosen specifically to protect these species. Let’s quantify what proportion of the population these two regions capture.\n\n# mask the proportion of population layers by the selected sites\nselected_pp &lt;- prop_population %&gt;% \n  crop(selected_sites) %&gt;% \n  mask(selected_sites, maskvalues = c(0, NA))\n# calculate total percent of population within proposed sites\npercent_selected &lt;- global(selected_pp, fun = \"sum\", na.rm = TRUE)\npercent_selected &lt;- data.frame(species_code = names(selected_pp),\n                               selected_percent = percent_selected[, 1])\n\n# combine with values for existing network\ncomparison &lt;- inner_join(percent_protected, percent_selected,\n                         by = \"species_code\") %&gt;% \n  rename(existing_network = percent_population,\n         prioritized_sites = selected_percent) %&gt;% \n  pivot_longer(cols = c(existing_network, prioritized_sites),\n               names_to = \"network_type\",\n               values_to = \"percent_population\")\n\n# plot the data\nggplot(comparison) +\n  aes(x = fct_reorder(common_name, percent_population),\n      y = percent_population,\n      group = network_type,\n      fill = network_type) +\n  geom_col(position = \"dodge\") +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_brewer(palette = \"Set1\") +\n  labs(x = NULL, \n       y = \"Percent of population in protected areas\",\n       fill = NULL) +\n  coord_flip() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nSo, for the same total area, we could capture a much larger proportion of the populations of these species if we use eBird Status data products for these species in our site prioritization. This example is, of course, overly simplistic. For example, in a real world application, different sites have different costs associated with protection and you would want to account for that during prioritization. For more complex prioritization problems, systematic conservation planning tools like the R package prioritizr can be used effectively with eBird Status data products."
  }
]