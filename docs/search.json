[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eBird Status Data Products",
    "section": "",
    "text": "Introduction\nThe contents of this website comprise the notes for a workshop on best practices for using eBird Status data products presented at the Australasian Ornithological Conference 2023 on Friday December 1 in Brisbane, Australia.\nThe eBird Status Data Products materials cover: downloading eBird Status data products, loading the data into R, and using them for a variety of applications."
  },
  {
    "objectID": "index.html#sec-intro-setup",
    "href": "index.html#sec-intro-setup",
    "title": "eBird Status Data Products",
    "section": "Setup",
    "text": "Setup\nThis workshop is intended to be interactive. All examples are written in the R programming language, and the instructor will work through the examples in real time, while the attendees are encouraged following along by writing the same code. To ensure we can avoid any unnecessary delays, please follow these setup instructions prior to the workshop:\n\nCreate an eBird account if you don’t already have one and request access to the eBird Status data products.\nDownload and install the latest version of R. You must have R version 4.0.0 or newer to follow along with this workshop\nDownload and install the latest version of RStudio. RStudio is not required for this workshop; however, the instructors will be using it and you may find it easier to following along if you’re working in the same environment.\nCreate an RStudio project for working through the examples in this workshop.\nThe lessons in this workshop use a variety of R packages. To install all the necessary packages, run the following code\n\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"ebird/ebird-best-practices\")\n\n\nEnsure all packages are updated to their most recent versions by clicking on the Update button on the Packages tab in RStudio."
  },
  {
    "objectID": "index.html#sec-intro-tidyverse",
    "href": "index.html#sec-intro-tidyverse",
    "title": "eBird Status Data Products",
    "section": "Tidyverse",
    "text": "Tidyverse\nThroughout this workshop, we use packages from the Tidyverse, an opinionated collection of R packages designed for data science. Packages such as ggplot2, for data visualization, and dplyr, for data manipulation, are two of the most well known Tidyverse packages; however, there are many more. We’ll try to explain any functions as they come up; however, for a good general resource on working with data in R using the Tidyverse see the free online book R for Data Science by Hadley Wickham.\nThe one piece of the Tidyverse that we will cover up front is the pipe operator %&gt;%. The pipe takes the expression to the left of it and “pipes” it into the first argument of the expression on the right.\n\nlibrary(dplyr)\n\n# without pipe\nmean(1:10)\n#&gt; [1] 5.5\n\n# with pipe\n1:10 %&gt;% mean()\n#&gt; [1] 5.5\n\nThe pipe can code significantly more readable by avoiding nested function calls, reducing the need for intermediate variables, and making sequential operations read left-to-right. For example, to add a new variable to a data frame, then summarize using a grouping variable, the following are equivalent:\n\n# intermediate variables\nmtcars_kg &lt;- mutate(mtcars, wt_kg = 454 * wt)\nmtcars_grouped &lt;- group_by(mtcars_kg, cyl)\nsummarize(mtcars_grouped, wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# nested function calls\nsummarize(\n  group_by(\n    mutate(mtcars, wt_kg = 454 * wt),\n    cyl\n  ),\n  wt_kg = mean(wt_kg)\n)\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# pipes\nmtcars %&gt;% \n  mutate(wt_kg = 454 * wt) %&gt;% \n  group_by(cyl) %&gt;% \n  summarize(wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n\n\n\n\n\n\nExercise\n\n\n\nRewrite the following code using pipes:\n\nset.seed(1)\nround(log(runif(10, min = 0.5)), 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nset.seed(1)\nrunif(10, min = 0.5) %&gt;% \n  log() %&gt;% \n  round(digits = 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-access",
    "href": "ebirdst.html#sec-ebirdst-access",
    "title": "1  eBird Status Data Products",
    "section": "1.1 Data access",
    "text": "1.1 Data access\nAccess to the eBird Status Data Products is granted through an Access Request Form at: https://ebird.org/st/request. The terms of use have been designed to be quite permissive in many cases, particularly academic and research use. After reading the eBird Status and Trends Products Terms of Use and filling out the Access Request Form you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the ebirdst package, run the following (replacing \"XXXXXXXXX\" with your actual key):\n\n#set_ebirdst_access_key(\"XXXXXXXXX\")\n\nThen immediately restart R. This will save the access key as the environment variable EBIRDST_KEY in your .Renviron file so it’s accessible within your R session.\n\n\n\n\n\n\nCheckpoint\n\n\n\nTo ensure your data access key is working, attempt run the following code, which will download a single small file. Speak to the instructor if this doesn’t work.\n\nebirdst_download_status(\"scamyz1\", pattern = \"abundance_median_27km\", \n                        force = TRUE)"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-species",
    "href": "ebirdst.html#sec-ebirdst-species",
    "title": "1  eBird Status Data Products",
    "section": "1.2 Status species",
    "text": "1.2 Status species\nThe ebirdst_runs object is a data frame listing all the available species:\n\nglimpse(ebirdst_runs)\n#&gt; Rows: 1,113\n#&gt; Columns: 28\n#&gt; $ species_code                   &lt;chr&gt; \"abetow\", \"acafly\", \"acowoo\", \"affeag1\"…\n#&gt; $ scientific_name                &lt;chr&gt; \"Melozone aberti\", \"Empidonax virescens…\n#&gt; $ common_name                    &lt;chr&gt; \"Abert's Towhee\", \"Acadian Flycatcher\",…\n#&gt; $ is_resident                    &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, F…\n#&gt; $ breeding_quality               &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ breeding_start                 &lt;date&gt; NA, 2022-05-24, NA, NA, 2022-06-21, NA…\n#&gt; $ breeding_end                   &lt;date&gt; NA, 2022-08-02, NA, NA, 2022-07-12, NA…\n#&gt; $ nonbreeding_quality            &lt;chr&gt; NA, \"3\", NA, NA, \"1\", NA, \"1\", \"3\", NA,…\n#&gt; $ nonbreeding_start              &lt;date&gt; NA, 2022-12-06, NA, NA, 2022-11-15, NA…\n#&gt; $ nonbreeding_end                &lt;date&gt; NA, 2022-02-15, NA, NA, 2022-03-29, NA…\n#&gt; $ postbreeding_migration_quality &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ postbreeding_migration_start   &lt;date&gt; NA, 2022-08-09, NA, NA, 2022-07-19, NA…\n#&gt; $ postbreeding_migration_end     &lt;date&gt; NA, 2022-11-29, NA, NA, 2022-11-08, NA…\n#&gt; $ prebreeding_migration_quality  &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"2\", \"3\", NA,…\n#&gt; $ prebreeding_migration_start    &lt;date&gt; NA, 2022-02-22, NA, NA, 2022-04-05, NA…\n#&gt; $ prebreeding_migration_end      &lt;date&gt; NA, 2022-05-17, NA, NA, 2022-06-14, NA…\n#&gt; $ resident_quality               &lt;chr&gt; \"3\", NA, \"3\", \"2\", NA, \"2\", NA, NA, \"3\"…\n#&gt; $ resident_start                 &lt;date&gt; 2022-01-04, NA, 2022-01-04, 2022-01-04…\n#&gt; $ resident_end                   &lt;date&gt; 2022-12-27, NA, 2022-12-27, 2022-12-27…\n#&gt; $ has_trends                     &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FA…\n#&gt; $ trends_season                  &lt;chr&gt; \"resident\", \"breeding\", \"resident\", NA,…\n#&gt; $ trends_region                  &lt;chr&gt; \"north_america\", \"north_america\", \"nort…\n#&gt; $ trends_start_year              &lt;dbl&gt; 2012, 2012, 2011, NA, 2012, 2015, NA, 2…\n#&gt; $ trends_end_year                &lt;dbl&gt; 2022, 2022, 2021, NA, 2022, 2022, NA, 2…\n#&gt; $ trends_start_date              &lt;chr&gt; \"01-25\", \"05-24\", \"11-01\", NA, \"06-21\",…\n#&gt; $ trends_end_date                &lt;chr&gt; \"05-10\", \"08-02\", \"05-03\", NA, \"07-12\",…\n#&gt; $ rsquared                       &lt;dbl&gt; 0.923, 0.857, 0.881, NA, 0.787, 0.820, …\n#&gt; $ beta0                          &lt;dbl&gt; -0.01392, 0.68942, -0.09267, NA, -0.162…\n\nIf you’re working in RStudio, you can use View() to interactively explore this data frame. You can also consult the Status and Trends species page the full list of available species. On this page you can also filter by region, for example to see only those species with some portion of their range falling within Australia."
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-download",
    "href": "ebirdst.html#sec-ebirdst-download",
    "title": "1  eBird Status Data Products",
    "section": "1.3 Downloading data",
    "text": "1.3 Downloading data\nThe function ebirdst_download_status() downloads data for a single species given a species name (common name, scientific name, or species code). The full data package for each species contains a large number of files, many of which may be unnecessary for your application. You can use the dry_run = TRUE and download_all = TRUE arguments to ebirdst_download_status() to list the available files without downloading them.\n\nebirdst_download_status(\"Scarlet Myzomela\", download_all = TRUE, dry_run = TRUE)\n\nWithin the data package directory, the primary files are organized according to the following structure:\n\nweekly/: a directory containing weekly estimates of relative abundance and proportion of population on a regular grid in GeoTIFF format at three resolutions. See below for more details.\nseasonal/: a directory containing seasonal estimates of relative abundance and proportion of population on a regular grid in GeoTIFF format at three resolutions. These are derived from the corresponding weekly raster data. Dates defining the boundary of each season are set on a species-specific basis by an expert reviewer familiar with the species. These dates are available in the ebirdst_runs data frame. Only seasons that passed the expert review process are included. See below for more details.\nconfig.json: run-specific parameters, mostly for internal use, but also containing useful parameters for mapping the abundance data.\n\nAll predictions are made on a standard 2.96km x 2.96km global grid, however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:\n\nHigh resolution (3km): the native 2.96 km resolution data\nMedium resolution (9km): the high resolution data aggregated by a factor of 3 in each direction resulting in a resolution of 8.89 km\nLow resolution (27km): the high resolution data aggregated by a factor of 9 in each direction resulting in a resolution of 26.7 km\n\nThe ebirdst_download_status() function has been designed with a number of parameters that make it easy to choose what specific data products to download. For the sake of speed in the workshop, we’re going to use the function default to only download relative abundance and proportion of population. To learn more about downloading additional specific data products, load the help for the function with ?ebirdst::ebirdst_download_status.\nTo download the data for Scarlet Myzomela use:\n\nebirdst_download_status(species = \"Scarlet Myzomela\")\n\nThe function will automatically identify a suitable location to store the downloaded data.\n\n\n\n\n\n\nTip\n\n\n\nTo avoid any issues resulting from all participants downloading data over a slow internet connection at the same time, for the remainder of this lesson we’ll use data included in the data package for this workshop. To confirm the data are in the correct location, let’s load a raster file with the path defined. Note: to keep the file sizes small and the analysis fast, the data package has not included the highest resolution 3km data. If you would like to work with that resolution, you’ll need to run the download function for these species on your own.\n\ntest_raster &lt;- load_raster(\"Scarlet Myzomela\", product = \"abundance\", \n                           period = \"seasonal\", path = \"data/ebirdst-data\", \n                           resolution = \"9km\")\ntest_raster\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : scamyz1_abundance_seasonal_mean_9km_2022.tif \n#&gt; names       : breeding, nonbreeding, prebree~gration, postbre~gration \n#&gt; min values  :     0.00,        0.00,             0.0,            0.00 \n#&gt; max values  :     1.66,        4.25,             2.9,            4.53\n\nHowever, when working with eBird Status data products after this workshop, it’s best to use the standard download location and skip adding path = \"data/ebirdst-data/\" to function calls."
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-applications",
    "href": "ebirdst.html#sec-ebirdst-applications",
    "title": "1  eBird Status Data Products",
    "section": "1.4 Applications",
    "text": "1.4 Applications\nThe core of the workshop will work through three example applications using the eBird Status data products as a way to understand practical applications and learn about the data structure and R package:\n\nTrajectories: chart the change in the proportion of the population in a region throughout the year for a set of species.\nRegional statistics: calculate the proportion of the breeding population falling within protected areas for a set of species.\nPrioritization: use eBird Status data products to identify important sites for protection of a set of species.\n\n\n1.4.1 Trajectories\nIn this application, we’ll look at the change in for populations for two species throughout the year in Queensland, Australia. We’ll consider Scarlet Myzomela and Leaden Flycatcher, two migrant species that are mostly endemic to Australia (data for both species are in the workshop data package). When comparing multiple species, or a single species between different seasons, as is the case here, it’s important to consider the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and species.\nLet’s start by using the load_raster() function to load the weekly proportion of population data for these species. We’ll also load a boundary polygon for Queensland. eBird Status Data Products that are in grid or raster format come in three spatial resolutions: 3 km (the original fine scale of prediction), 9 km (aggregated once), and 27 km (a second aggregation). Which resolution to use depends on use case and performance. The 27 km data will be fastest to work with, but provide the least resolution. Here we’ll work with the 9 km resolution as a trade off of resolution for speed in the workshop.\n\n# proportion of population cubes\n\npop1 &lt;- load_raster(\"Scarlet Myzomela\", product = \"proportion-population\", \n                    period = \"weekly\", resolution = \"9km\", path = \"data/ebirdst-data/\")\n\npop2 &lt;- load_raster(\"Leaden Flycatcher\", product = \"proportion-population\", \n                    period = \"weekly\", resolution = \"9km\", path = \"data/ebirdst-data/\")\n\n# Queensland boundary, projected to match the raster data\nqld &lt;- read_sf(\"data/gis-data.gpkg\", \"regions\") %&gt;% \n  filter(state_code == \"AU-QLD\") %&gt;% \n  st_transform(crs = crs(pop1))\n\nNow, we’ll use the R package exactextractr to calculate the sum of the proportions for each species within Queensland.\n\n# sum within Queensland\n# Scarlet Myzomela\ntraj1 &lt;- exact_extract(pop1, qld, fun = \"sum\")\ntraj1 &lt;- data.frame(species = \"Scarlet Myzomela\", \n                    week = as.Date(names(pop1)),\n                    prop_pop = as.numeric(traj1[1, ]))\n\n# Leaden Flycatcher\ntraj2 &lt;- exact_extract(pop2, qld, fun = \"sum\")\ntraj2 &lt;- data.frame(species = \"Leaden Flycatcher\",\n                    week = as.Date(names(pop2)),\n                    prop_pop = as.numeric(traj2[1, ]))\n\n# combine\ntrajectories &lt;- bind_rows(traj1, traj2)\nhead(trajectories)\n#&gt;            species       week prop_pop\n#&gt; 1 Scarlet Myzomela 2022-01-04    0.311\n#&gt; 2 Scarlet Myzomela 2022-01-11    0.326\n#&gt; 3 Scarlet Myzomela 2022-01-18    0.417\n#&gt; 4 Scarlet Myzomela 2022-01-25    0.452\n#&gt; 5 Scarlet Myzomela 2022-02-01    0.470\n#&gt; 6 Scarlet Myzomela 2022-02-08    0.556\n\nFinally we can plot the trajectories.\n\nggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Week\", \n       y = \"% of population\",\n       title = \"Weekly proportion of population trajectory\",\n       color = NULL) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n1.4.2 Regional statistics\nFor this application, we calculate the proportion of the population within protected areas in Queensland for a set of species. As an example species group, we’ll use a set of 12 species that are mostly endemic to eastern Australia. For migratory species we’ll focus on the breeding season.\n\nspecies_list &lt;- c(\"yefhon1\", \"easspi1\", \"scamyz1\", \"blfmon1\", \"railor5\",\n                  \"yelrob1\", \"bruwat1\", \"belmin1\", \"ytbcoc1\", \"scblor1\",\n                  \"broger1\", \"cresht1\")\n\n# add common names, migrant/resident status, and quality\nspecies_list &lt;- filter(ebirdst_runs, species_code %in% species_list) %&gt;% \n  mutate(quality = ifelse(is_resident, resident_quality, breeding_quality)) %&gt;% \n  select(species_code, common_name, is_resident, quality)\nprint(species_list)\n#&gt; # A tibble: 12 × 4\n#&gt;   species_code common_name         is_resident quality\n#&gt;   &lt;chr&gt;        &lt;chr&gt;               &lt;lgl&gt;       &lt;chr&gt;  \n#&gt; 1 belmin1      Bell Miner          TRUE        2      \n#&gt; 2 blfmon1      Black-faced Monarch FALSE       3      \n#&gt; 3 broger1      Brown Gerygone      TRUE        3      \n#&gt; 4 bruwat1      Little Wattlebird   TRUE        3      \n#&gt; 5 cresht1      Eastern Shrike-tit  TRUE        1      \n#&gt; 6 easspi1      Eastern Spinebill   FALSE       3      \n#&gt; # ℹ 6 more rows\n\nWe have five migrants and nine resident species. Notice that 1 of these species had a quality rating of 1 indicating that caution should be exercised when using the results. For real world use you should examine the relative abundance maps for errors prior to using them for analysis; however, for this example, we’ll use this species list as is. We’ll load and combine the breeding (for migrants) and resident (for residents) proportion of population layers for this list of species. Data for all of these species has been included in the workshop data package.\n\n\n\n\n\n\nTip\n\n\n\nRelative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it’s critical to always use the proportion of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.\n\n\n\n# loop over the species list extracting the seasonal proportion of population\nprop_population &lt;- list()\nfor (i in seq_len(nrow(species_list))) {\n  # load the seasonal cube for this species\n  this_sp &lt;- species_list[i, ]\n  \n  pop &lt;- load_raster(this_sp$species_code, product = \"proportion-population\", \n                     period = \"seasonal\", resolution = \"9km\", \n                     path = \"data/ebirdst-data/\")\n  \n  # subset to the layer we need: breeding or resident\n  pop &lt;- pop[[ifelse(this_sp$is_resident, \"resident\", \"breeding\")]]\n  prop_population[[this_sp$species_code]] &lt;- pop\n}\n\n# stack the rasters into a single object\nprop_population &lt;- rast(prop_population)\n\nThe GIS data available in the workshop data package contains polygon boundaries for the National Reserve System, subset to Queensland, from the Collaborative Australian Protected Areas Database (CAPAD). Let’s load them now and project to match the raster layers. For this example, we’ll combine all the protected area polygons together into one feature; however, this analysis could be modified to consider how the distribution of species varies between protected areas.\n\nprotected &lt;- read_sf(\"data/capad2022.gpkg\") %&gt;% \n  filter(STATE == \"QLD\") %&gt;%\n  st_combine() %&gt;% \n  st_transform(crs = crs(prop_population))\n\nFinally, we can use exactextracr to calculate the total percent of population within protected areas for each species.\n\npercent_protected &lt;- exact_extract(prop_population, protected, fun = \"sum\")\npercent_protected &lt;- as.numeric(percent_protected[1, ])\npercent_protected &lt;- data.frame(species_code = species_list$species_code,\n                                common_name = species_list$common_name,\n                                percent_population = percent_protected) %&gt;% \n  arrange(desc(percent_population))\nprint(percent_protected)\n#&gt;    species_code                  common_name percent_population\n#&gt; 1       railor5             Rainbow Lorikeet            0.14046\n#&gt; 2       scblor1      Scaly-breasted Lorikeet            0.10064\n#&gt; 3       broger1               Brown Gerygone            0.08406\n#&gt; 4       blfmon1          Black-faced Monarch            0.08291\n#&gt; 5       scamyz1             Scarlet Myzomela            0.07773\n#&gt; 6       belmin1                   Bell Miner            0.05049\n#&gt; 7       yelrob1         Eastern Yellow Robin            0.03767\n#&gt; 8       bruwat1            Little Wattlebird            0.01492\n#&gt; 9       easspi1            Eastern Spinebill            0.01296\n#&gt; 10      yefhon1      Yellow-faced Honeyeater            0.01189\n#&gt; 11      cresht1           Eastern Shrike-tit            0.00967\n#&gt; 12      ytbcoc1 Yellow-tailed Black-Cockatoo            0.00867\n\n# plot the data\nggplot(percent_protected) +\n  aes(x = fct_reorder(common_name, percent_population),\n      y = percent_population) +\n  geom_col(aes(fill = percent_population)) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_viridis_b() +\n  labs(x = NULL, y = \"Percent of population in protected areas\") +\n  coord_flip() +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n1.4.3 Prioritization\nFor the final application, we’ll perform a multi-species site prioritization exercise, identifying important sites for protecting the set of species we identified in the previous application. Let’s start by generating a multi-species importance layer by calculating the mean percent of population across all selected species. Since we’re focused on identifying sites in Queensland, we’ll also crop and mask the importance layer.\n\n# importance: mean proportion of population across species\n# fill missing values with zeros prior to averaging\nimportance &lt;- ifel(is.na(prop_population), 0, prop_population) %&gt;% \n  mean(na.rm = TRUE) %&gt;% \n  # using the spatial data from above to crop and mask\n  crop(qld) %&gt;% \n  mask(qld)\n\n# plot the square root of importance since the data are right skewed\npar(mar = c(0.25, 0.25, 0.25, 0.25))\ncrs &lt;- \"+proj=laea +lon_0=146.95 +lat_0=-19.15 +datum=WGS84 +units=m +no_defs\"\nr_plot &lt;- sqrt(importance) %&gt;% \n  project(crs, method = \"near\") %&gt;% \n  trim()\nplot(r_plot, axes = FALSE)\n\n\n\n\n\n\n\n\nThe absolute numbers in this map are challenging to interpret (they’re the mean proportion of the population across the species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of species.\nThis is application so far, we have examined existing protected areas. For the sake of comparison, let’s imagine we want to identify the most important sites in eastern Australia that cover the same area as the existing protected area network. What proportion of Australia does the current protected area network cover?\n\n# proportion of queensland in existing protected area network\narea_aus_qld &lt;- sum(st_area(qld))\n\nprotected_qld &lt;- read_sf(\"data/capad2022.gpkg\") %&gt;%\n  filter(STATE %in% c(\"QLD\") & \n           IUCN %in% c(\"Ia\", \"Ib\", \"II\", \"III\", \"IV\")) %&gt;%\n  st_combine() %&gt;% \n  st_transform(crs = crs(prop_population))\n\narea_aus_qld_protected &lt;- protected_qld %&gt;%\n  st_area()\n\nproportion_protected &lt;- as.numeric(area_aus_qld_protected / area_aus_qld)\nprint(proportion_protected)\n#&gt; [1] 0.072\n\nSo, 7.2% of eastern Australia is covered by the existing network of protected areas. Let’s identify the top 7.2% most important raster cells from the multi-species importance layer.\n\n# identify the quantile corresponding to the desired protection level\nq &lt;- global(importance, fun = quantile, \n            probs = 1 - proportion_protected, na.rm = TRUE) %&gt;% \n  as.numeric()\n# identify the most importance cells\nselected_sites &lt;- as.numeric(importance &gt;= q)\n\nLet’s compare maps of the existing protected area network and the sites selected using eBird Status and Trends.\n\npar(mar = c(0.25, 0.25, 0.25, 0.25))\n\n# high importance\nr_plot &lt;- project(selected_sites, crs, method = \"near\") %&gt;% \n  trim()\nprotected_proj &lt;- st_transform(protected_qld, crs = crs) %&gt;% \n  st_geometry()\nplot(r_plot, axes = FALSE, legend = FALSE)\n\n# existing\nplot(st_simplify(protected_proj), \n     col = \"#00000088\", border = NA,\n     add = TRUE)\n\n\n\n\n\n\n\n\nThe high importance sites we identified are shown in green, while the existing protected area network is overlaid in grey. It appears the existing protected area network is doing a better job in northern Queensland than in southeast Queensland for these species. This might not be surprising since the location of existing protected areas was not chosen specifically to protect these species. Let’s quantify what proportion of the population these two regions capture.\n\n# mask the proportion of population layers by the selected sites\nselected_pp &lt;- prop_population %&gt;% \n  crop(selected_sites) %&gt;% \n  mask(selected_sites, maskvalues = c(0, NA))\n# calculate total percent of population within proposed sites\npercent_selected &lt;- global(selected_pp, fun = \"sum\", na.rm = TRUE)\npercent_selected &lt;- data.frame(species_code = names(selected_pp),\n                               selected_percent = percent_selected[, 1])\n\n# combine with values for existing network\ncomparison &lt;- inner_join(percent_protected, percent_selected,\n                         by = \"species_code\") %&gt;% \n  rename(existing_network = percent_population,\n         prioritized_sites = selected_percent) %&gt;% \n  pivot_longer(cols = c(existing_network, prioritized_sites),\n               names_to = \"network_type\",\n               values_to = \"percent_population\")\n\n# plot the data\nggplot(comparison) +\n  aes(x = fct_reorder(common_name, percent_population),\n      y = percent_population,\n      group = network_type,\n      fill = network_type) +\n  geom_col(position = \"dodge\") +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_brewer(palette = \"Set1\") +\n  labs(x = NULL, \n       y = \"Percent of population in protected areas\",\n       fill = NULL) +\n  coord_flip() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nSo, for the same total area, we could capture a much larger proportion of the populations of these species if we use eBird Status data products for these species in our site prioritization. This example is, of course, overly simplistic. For example, in a real world application, different sites have different costs associated with protection and you would want to account for that during prioritization. For more complex prioritization problems, systematic conservation planning tools like the R package prioritizr can be used effectively with eBird Status data products."
  },
  {
    "objectID": "appendix.html#sec-ebirdst-load",
    "href": "appendix.html#sec-ebirdst-load",
    "title": "2  Appendix",
    "section": "2.1 Loading data in R",
    "text": "2.1 Loading data in R\nIn this workshop, we’ll focus on the raster data products, which can all be loaded into R using the ebirdst function load_raster(). In R, we’ll use the terra package to work with raster data. Raster data products fall into two broad categories providing weekly and seasonal estimates.\n\n2.1.1 Weekly raster estimates\nThe core raster data products are the weekly estimates of occurrence, count, relative abundance, and percent of population. All estimates are the median expected value for a 1km, 2 hour eBird Traveling Count by an expert eBird observer at the optimal time of day and for optimal weather conditions to observe the given species.\n\nOccurrence occurrence: the expected probability of encountering a species.\nCount count: the expected count of a species, conditional on its occurrence at the given location.\nRelative abundance abundance: the expected relative abundance of a species, computed as the product of the probability of occurrence and the count conditional on occurrence. In addition to the median relative abundance, upper and lower confidence intervals (CIs) are provided, defined at the 10th and 90th quantile of relative abundance, respectively.\nProportion of population proportion-population: the proportion of the total relative abundance within each cell. This is a derived product calculated by dividing each cell value in the relative abundance raster by the sum of all cell values\n\nAll predictions are made on a standard 2.96km x 2.96km global grid, however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:\n\nHigh resolution (3km): the native 2.96 km resolution data\nMedium resolution (9km): the high resolution data aggregated by a factor of 3 in each direction resulting in a resolution of 8.89 km\nLow resolution (27km): the high resolution data aggregated by a factor of 9 in each direction resulting in a resolution of 26.7 km\n\nThe weekly cubes use the following naming convention:\nweekly/&lt;species_code&gt;_&lt;product&gt;_&lt;metric&gt;_&lt;resolution&gt;_&lt;year&gt;.tif\nwhere metric is typically median, except for the relative abundance CIs, which use lower and upper. The function load_raster() is used to load these data into R and takes arguments for product, metric and resolution. For example, to load the high resolution weekly median relative abundance, use\n\nabd_median_hr &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                             period = \"weekly\", resolution = \"9km\")\nprint(abd_median_hr)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : leafly2_abundance_median_9km_2022.tif \n#&gt; names       : 2022-01-04, 2022-01-11, 2022-01-18, 2022-01-25, 2022-02-01, 2022-02-08, ... \n#&gt; min values  :      0.000,      0.000,      0.000,      0.000,      0.000,      0.000, ... \n#&gt; max values  :      0.927,      0.891,      0.881,      0.854,      0.772,      0.593, ...\n\nWe often refer to these raster objects as “weekly cubes” (e.g. the “weekly abundance cube”). Notice that the cubes contains 52 layers, corresponding to the weeks of the year. The layer names are the dates associated with the mid-point of each week.\n\nas.Date(names(abd_median_hr))\n#&gt;  [1] \"2022-01-04\" \"2022-01-11\" \"2022-01-18\" \"2022-01-25\" \"2022-02-01\"\n#&gt;  [6] \"2022-02-08\" \"2022-02-15\" \"2022-02-22\" \"2022-03-01\" \"2022-03-08\"\n#&gt; [11] \"2022-03-15\" \"2022-03-22\" \"2022-03-29\" \"2022-04-05\" \"2022-04-12\"\n#&gt; [16] \"2022-04-19\" \"2022-04-26\" \"2022-05-03\" \"2022-05-10\" \"2022-05-17\"\n#&gt; [21] \"2022-05-24\" \"2022-05-31\" \"2022-06-07\" \"2022-06-14\" \"2022-06-21\"\n#&gt; [26] \"2022-06-28\" \"2022-07-05\" \"2022-07-12\" \"2022-07-19\" \"2022-07-26\"\n#&gt; [31] \"2022-08-02\" \"2022-08-09\" \"2022-08-16\" \"2022-08-23\" \"2022-08-30\"\n#&gt; [36] \"2022-09-06\" \"2022-09-13\" \"2022-09-20\" \"2022-09-27\" \"2022-10-04\"\n#&gt; [41] \"2022-10-11\" \"2022-10-18\" \"2022-10-25\" \"2022-11-01\" \"2022-11-08\"\n#&gt; [46] \"2022-11-15\" \"2022-11-22\" \"2022-11-29\" \"2022-12-06\" \"2022-12-13\"\n#&gt; [51] \"2022-12-20\" \"2022-12-27\"\n\nAs another example, we could load the low resolution upper and lower abundance confidence intervals.\n\nabd_lower_lr &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                            period = \"weekly\", metric = \"lower\", \n                            resolution = \"27km\")\nabd_upper_lr &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                            period = \"weekly\", metric = \"upper\",  \n                            resolution = \"27km\")\n\n\n\n\n\n\n\nExercise\n\n\n\nTry loading the weekly median percent of population cube at medium resolution.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npct_pop &lt;- load_raster(\"Leaden Flycatcher\", product = \"proportion-population\", \n                       period = \"weekly\", metric = \"median\", resolution = \"9km\")\nprint(pct_pop)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : leafly2_proportion-population_median_9km_2022.tif \n#&gt; names       : 2022-01-04, 2022-01-11, 2022-01-18, 2022-01-25, 2022-02-01, 2022-02-08, ... \n#&gt; min values  :   0.000000,   0.000000,    0.00000,   0.000000,   0.000000,    0.00000, ... \n#&gt; max values  :   0.000205,   0.000214,    0.00021,   0.000212,   0.000198,    0.00015, ...\n\n\n\n\n\n\n2.1.2 Seasonal raster estimates\nThe seasonal raster estimates are provided for the same set of products and at the same three resolutions as the weekly estimates. They’re derived from the weekly data by taking the cell-wise mean or max across the weeks within each season. Recall that the seasonal boundary dates are available in the data frame ebirdst_runs; data is not provided for seasons with a quality score of 0.\nThe seasonal GeoTIFFs use the following naming convention:\nseasonal/&lt;species_code&gt;_&lt;product&gt;_seasonal_&lt;metric&gt;_&lt;resolution&gt;_&lt;year&gt;.tif\nwhere metric is either mean or max. The function load_raster(period = \"seasonal\") is used to load these data into R and takes arguments for product, metric and resolution. For example, to load the low resolution mean seasonal relative abundance, use\n\nabd_seasonal_mean &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                                 period = \"seasonal\", metric = \"mean\", \n                                 resolution = \"27km\")\nprint(abd_seasonal_mean)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 626, 1502, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6684911, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : leafly2_abundance_seasonal_mean_27km_2022.tif \n#&gt; names       : breeding, nonbreeding, prebree~gration, postbre~gration \n#&gt; min values  :     0.00,       0.000,           0.000,           0.000 \n#&gt; max values  :     0.55,       0.914,           0.539,           0.501\n\nNotice there are four layers in this raster corresponding to the four seasons.\n\nnames(abd_seasonal_mean)\n#&gt; [1] \"breeding\"               \"nonbreeding\"            \"prebreeding_migration\" \n#&gt; [4] \"postbreeding_migration\"\n\nFinally, as a convenience, the data products include year-round rasters summarizing the mean or max across all weeks that fall within a season that passed the expert review process. These can be accessed similarly to the seasonal products, just with period = \"full-year\" instead. For example, these layers can be used in conservation planning to assess the most important sites across the full range and full annual cycle of a species.\n\nabd_fy_max &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                          period = \"full-year\", metric = \"max\", \n                          resolution = \"9km\")"
  },
  {
    "objectID": "appendix.html#sec-ebirdst-explore",
    "href": "appendix.html#sec-ebirdst-explore",
    "title": "2  Appendix",
    "section": "2.2 Exploring the raster data",
    "text": "2.2 Exploring the raster data\nLet’s load the low resolution weekly and seasonal relative abundance cubes and use them to demonstrate some basic raster operations with the data.\n\nabd_weekly &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                          period = \"weekly\", resolution = \"9km\")\nabd_seasonal &lt;- load_raster(\"Leaden Flycatcher\", product = \"abundance\", \n                            period = \"seasonal\", resolution = \"9km\")\n\nThese cubes can easily be subset to a single week or season.\n\n# week of may 17\nabd_weekly[[\"2022-05-17\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : leafly2_abundance_median_9km_2022.tif \n#&gt; name        : 2022-05-17 \n#&gt; min value   :      0.000 \n#&gt; max value   :      0.934\n# breeding season\nabd_seasonal[[\"breeding\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : leafly2_abundance_seasonal_mean_9km_2022.tif \n#&gt; name        : breeding \n#&gt; min value   :    0.000 \n#&gt; max value   :    0.823\n\nWe can also subset the weekly cube to a range of weeks. For example, let’s subset to only the estimates for weeks in May, then take the average across the weeks.\n\n# determine which dates we want to include\nweek_dates &lt;- as.Date(names(abd_weekly))\nstart_date &lt;- as.Date(\"2022-05-01\")\nend_date &lt;- as.Date(\"2022-05-31\")\nweek_in_may &lt;- week_dates &gt;= start_date & week_dates &lt;= end_date\n\n# subset to weeks in may\nabd_weekly_may &lt;- abd_weekly[[week_in_may]]\n\n# average across weeks\nmean(abd_weekly_may, na.rm = TRUE)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; name        :  mean \n#&gt; min value   : 0.000 \n#&gt; max value   : 0.845\n\nMaking a simple map of the data will produce unexpected results. For example, let’s map the breeding season relative abundance for Green-backed Firecrown.\n\nplot(abd_seasonal[[\"breeding\"]])\n\n\n\n\n\n\n\n\nRecall that all eBird Status data products are provided for the entire globe, regardless of the range of the species. Also, notice that some areas, such as most of the Amazon Basin, have missing values indicating that there was insufficient data to make a prediction in the region. Other areas, such as North America, had sufficient data to predict that the species is absent. Let’s try using the GIS data included in the workshop data package to crop the raster to Queensland to make a more meaningful map.\n\n# Queensland boundary, projected to match the raster data\nqld &lt;- read_sf(\"data/gis-data.gpkg\",  layer = \"regions\") %&gt;% \n  filter(state_code == \"AU-QLD\") %&gt;% \n  st_transform(crs = crs(abd_seasonal)) %&gt;% \n  st_geometry()\n# crop raster data to chile\nabd_breeding_qld &lt;- crop(abd_seasonal[[\"breeding\"]], qld)\n# map\nplot(abd_breeding_qld)\nplot(qld, add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nLet’s take a break before proceeding onto some more realistic applications of the eBird Status data products. Make sure you’re comfortable loading the data into R and performing some of the basic operations."
  },
  {
    "objectID": "index.html#sec-intro-setup-data",
    "href": "index.html#sec-intro-setup-data",
    "title": "eBird Status Data Products",
    "section": "Data",
    "text": "Data\nFor those working through the notes on their own, all the required data will be downloaded as needed during the lessons; however, for those attending the workshop, having 30 people attempt to download a large amount of data on the same WiFi connect can pose a problem. With that in mind, attendees will be asked to download data in advance by running the following code:\n\n# download data package\ntd &lt;- file.path(tempdir(), \"ebirdst-workshop-data\")\ndir.create(td, recursive = TRUE, showWarnings = FALSE)\ntf &lt;- file.path(td, \"data.zip\")\noptions(timeout = 10000)\ndownload.file(\"https://cornell.box.com/shared/static/le1try00p75jnw9vr7cb0c64m3icwkpm.zip\", \n              destfile = tf)\n\n# unzip\nunzip(tf, exdir = td)\ndata_dir &lt;- \"data\"\ndir.create(data_dir, showWarnings = FALSE)\n\n# move gis files\ndd &lt;- file.path(td, \"data/\")\npasf &lt;- \"capad2022.gpkg\"\ngisf &lt;- \"gis-data.gpkg\"\nfile.copy(file.path(dd, pasf), file.path(data_dir, pasf))\nfile.copy(file.path(dd, gisf), file.path(data_dir, gisf))\n\n# move ebirdst data\nebirdst_data_path &lt;- file.path(td, \"data/ebirdst-data/\")\nfiles &lt;- list.files(ebirdst_data_path, recursive = TRUE)\nfiles &lt;- files[grepl(\"^2022/\", files)]\ndest_dir &lt;- ebirdst::ebirdst_data_dir()\n# create directories\nfor (d in unique(dirname(files))) {\n  dir.create(file.path(dest_dir, d), showWarnings = FALSE, recursive = TRUE)\n}\n# copy files\nfor (f in files) {\n  if (!file.exists(file.path(dest_dir, f))) {\n    file.copy(from = file.path(ebirdst_data_path, f), \n              to = file.path(dest_dir, f))\n  }\n}\n\n# clean up\nunlink(td, recursive = TRUE)"
  },
  {
    "objectID": "index.html#template-r-script",
    "href": "index.html#template-r-script",
    "title": "eBird Status Data Products",
    "section": "Template R script",
    "text": "Template R script\nDuring the workshop we’ll work through the lessons on this website, writing code together in real time; however, it will be useful to have script templates to work from. Open RStudio, then:\nCreate a script named “ebird-status.R”, visit this link, and copy the contents into the script you just created."
  },
  {
    "objectID": "trends.html",
    "href": "trends.html",
    "title": "2  eBird Trends Data Products",
    "section": "",
    "text": "3 Downloading data\nTrends data access is granted through the same process as the eBird Status Data Products. If you haven’t already requested an API key, consult the relevant section in the Introduction to eBird Status Data Products vignette.\nTrends data can be downloaded for one or more species using ebirdst_download_trends(), where the first argument is a vector of common names, scientific names, or species codes. As with the Status Data Products, trends data will be downloaded to a centralized directory and file management and access is performed via `ebirdst. For example, let’s download the breeding season trends data for Sage Thrasher.\nebirdst_download_trends(\"Golden Whistler\")\nOnce the data are downloaded, the trends data for a set of species, can be loaded into R using the function load_trends(). For example, we can load the Sage Thrasher trends estimates we just downloaded with:\ntrends_golwhi1 &lt;- load_trends(\"Golden Whistler\")\nEach row corresponds to the trend estimate for a 27 km by 27 km grid cell, identified by the srd_id column and with cell center given by the longitude and latitude coordinates. Columns beginning with abd_ppy provide estimates of the percent per year trend in relative abundance and 80% confidence intervals, while those beginning with abd_trend provide estimates of the cumulative trend in relative abundance and 80% confidence intervals over the time period. The abd column gives the relative abundance estimate for the middle of the trend time period (e.g. 2018 for a 2014-2022 trend). The start_year/end_year and start_date/end_date columns provide redundant information to that available in ebirdst_runs.\ntrends_runs %&gt;% \n  filter(common_name == \"Golden Whistler\") %&gt;% \n  select(trends_start_year, trends_end_year,\n         trends_start_date, trends_end_date)\n#&gt; # A tibble: 1 × 4\n#&gt;   trends_start_year trends_end_year trends_start_date trends_end_date\n#&gt;               &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;          \n#&gt; 1              2013            2021 12-27             02-08\nThis tells us that the trend estimates are for the breeding season (December 27 to February) for the period 2013-2021.\nThe eBird trends data are stored in a tabular format, where each row gives the trend estimate for a single cell in a 27 km by 27 km equal area grid. For each grid cell, the coordinates (longitude and latitude) are provided for the center of the grid cell. For many applications, an explicitly spatial format is more useful and these coordinates can be use to convert from the tabular format to either a vector or raster format.\nThe model used to estimate trends produces an ensemble of 100 estimates at each location, each based on a random subsample of eBird data. This ensemble of estimates is used to quantify uncertainty in the trends estimates. The estimated trend is the median across the ensemble, and the 80% confidence intervals are the lower 10th and upper 90th percentiles across the ensemble. Those wishing to access estimates from the individual folds making up the ensemble can use fold_estimates = TRUE when loading data. These fold-level estimates can be used to quantify uncertainty, for example, when calculating the trend for a given region. For example, let’s load the fold-level estimates:\ntrends_golwhi1_folds &lt;- load_trends(\"golwhi1\", fold_estimates = TRUE)\nprint(trends_golwhi1_folds)\n#&gt; # A tibble: 84,000 × 8\n#&gt;   species_code season    fold srd_id latitude longitude     abd abd_ppy\n#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;dbl&gt;  &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 golwhi1      breeding     1 662214    -15.6      145. 0.00619  -0.125\n#&gt; 2 golwhi1      breeding     1 663715    -15.9      145. 0.0252    5.23 \n#&gt; 3 golwhi1      breeding     1 663716    -15.9      145. 0.0484    2.77 \n#&gt; 4 golwhi1      breeding     1 665216    -16.1      145. 0.260    -0.883\n#&gt; 5 golwhi1      breeding     1 665217    -16.1      145. 0.0246    3.81 \n#&gt; 6 golwhi1      breeding     1 665218    -16.1      145. 0.147     0.640\n#&gt; # ℹ 83,994 more rows\nThis data frame is much more concise, only giving estimates of the mid-point relative abundance and percent per year trend in relative abundance for each of 100 folds for each grid cell."
  },
  {
    "objectID": "trends.html#spatial-points",
    "href": "trends.html#spatial-points",
    "title": "2  eBird Trends Data Products",
    "section": "5.1 Vector (points)",
    "text": "5.1 Vector (points)\nThe tabular trend data can be converted into point vector features for use with the sf package using the sf function st_as_sf().\n\ntrends_sf &lt;- st_as_sf(trends_golwhi1, \n                      coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326)\nprint(trends_sf)\n#&gt; Simple feature collection with 840 features and 15 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 140 ymin: -43.5 xmax: 154 ymax: -15.6\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 840 × 16\n#&gt;   species_code season   start_year end_year start_date end_date srd_id     abd\n#&gt; * &lt;chr&gt;        &lt;chr&gt;         &lt;int&gt;    &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;\n#&gt; 1 golwhi1      breeding       2013     2021 12-27      02-08    662214 0.00619\n#&gt; 2 golwhi1      breeding       2013     2021 12-27      02-08    663715 0.0252 \n#&gt; 3 golwhi1      breeding       2013     2021 12-27      02-08    663716 0.0484 \n#&gt; 4 golwhi1      breeding       2013     2021 12-27      02-08    665216 0.260  \n#&gt; 5 golwhi1      breeding       2013     2021 12-27      02-08    665217 0.0246 \n#&gt; 6 golwhi1      breeding       2013     2021 12-27      02-08    665218 0.147  \n#&gt; # ℹ 834 more rows\n#&gt; # ℹ 8 more variables: abd_ppy &lt;dbl&gt;, abd_ppy_lower &lt;dbl&gt;, abd_ppy_upper &lt;dbl&gt;,\n#&gt; #   abd_ppy_nonzero &lt;lgl&gt;, abd_trend &lt;dbl&gt;, abd_trend_lower &lt;dbl&gt;,\n#&gt; #   abd_trend_upper &lt;dbl&gt;, geometry &lt;POINT [°]&gt;"
  },
  {
    "objectID": "trends.html#spatial-raster",
    "href": "trends.html#spatial-raster",
    "title": "2  eBird Trends Data Products",
    "section": "5.2 Raster",
    "text": "5.2 Raster\nThe tabular trend estimates can most easily be converted to raster format for use with the terra package using the function rasterize_trends(). Any of the columns in the trends data frame can be selected using the layers argument and converted into layers in the resulting raster object.\n\n# rasterize the percent per year trend with confidence limits (default)\nppy_raster &lt;- rasterize_trends(trends_golwhi1)\nprint(ppy_raster)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 117, 142, 3  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : 11769881, 15556347, -4845007, -1725169  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; names       : abd_ppy, abd_ppy_lower, abd_ppy_upper \n#&gt; min values  :   -12.7,         -16.8,         -11.1 \n#&gt; max values  :    17.7,          12.4,          21.2\n# rasterize the cumulative trend estimate\ntrends_raster &lt;- rasterize_trends(trends_golwhi1, layers = \"abd_trend\")\nprint(trends_raster)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 117, 142, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : 11769881, 15556347, -4845007, -1725169  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; name        : abd_trend \n#&gt; min value   :     -66.2 \n#&gt; max value   :     268.6\n\nA simple map of these data can be produced from the raster data. For example, we’ll make a map of percent per year change in relative abundance. Note that this is slightly different than the trends maps on the Status and Trends website, which show the cumulative trend rather than the annual trend.\n\n# define breaks and palettes similar to those on status and trends website\nbreaks &lt;- seq(-4, 4)\nbreaks[1] &lt;- -Inf\nbreaks[length(breaks)] &lt;- Inf\npal &lt;- ebirdst_palettes(length(breaks) - 1, type = \"trends\")\n\n# make a simple map\nplot(ppy_raster[[\"abd_ppy\"]], \n     col = pal, breaks =  breaks,\n     main = \"Golden Whistler breeding trend 2013-2021 [% change per year]\",\n     cex.main = 0.75,\n     axes = FALSE)"
  },
  {
    "objectID": "trends.html#applications-regional",
    "href": "trends.html#applications-regional",
    "title": "2  eBird Trends Data Products",
    "section": "2.5 Regional trends",
    "text": "2.5 Regional trends\neBird trend estimates are made on a 27 km by 27 km grid, which allows summarization over broader regions such as states or provinces. Since the relative abundance of a species varies throughout its range, we need to weight the mean trend calculation by relative abundance (abd in the trends data frame). To quantify uncertainty in the regional trend, we can use the fold-level data to produce 100 distinct estimates of the regional trend, then calculate the median and 80% confidence intervals. As an example, let’s calculate the state-level mean percent per year trends in relative abundance.\n\n# boundaries of states\nstates&lt;- read_sf(\"data/gis-data.gpkg\", \"regions\") %&gt;% \n  filter(country_code == \"AU\")\n\n# convert fold-level trends estimates to sf format\ntrends_golwhi1_sf &lt;-  st_as_sf(trends_golwhi1_folds, \n                              coords = c(\"longitude\", \"latitude\"), \n                              crs = 4326)\n\n# attach state to the fold-level trends data\ntrends_golwhi1_sf &lt;- st_join(trends_golwhi1_sf, states, left = FALSE)\n\n# abundance-weighted average trend by region and fold\ntrends_states_folds &lt;- trends_golwhi1_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(state_code, fold) %&gt;%\n  summarize(abd_ppy = sum(abd * abd_ppy) / sum(abd),\n            .groups = \"drop\")\n\n# summarize across folds for each state\ntrends_states &lt;- trends_states_folds %&gt;% \n  group_by(state_code) %&gt;%\n  summarise(abd_ppy_median = median(abd_ppy, na.rm = TRUE),\n            abd_ppy_lower = quantile(abd_ppy, 0.10, na.rm = TRUE),\n            abd_ppy_upper = quantile(abd_ppy, 0.90, na.rm = TRUE),\n            .groups = \"drop\") %&gt;% \n  arrange(abd_ppy_median)\n\nknitr::kable(trends_states, format = \"html\")\n\n\n\n\nstate_code\nabd_ppy_median\nabd_ppy_lower\nabd_ppy_upper\n\n\n\n\nAU-QLD\n-0.252\n-1.989\n0.569\n\n\nAU-ACT\n-0.157\n-2.674\n1.546\n\n\nAU-VIC\n0.083\n-0.740\n0.996\n\n\nAU-TAS\n0.481\n-0.612\n1.434\n\n\nAU-SA\n1.108\n-2.209\n2.049\n\n\nAU-NSW\n1.854\n0.530\n3.020\n\n\n\n\n\n\n\nNote in the table above, many of these regional-level estimates cross zero and are thus not significant. We can then join these state-level trends back to the state boundaries and make a map with ggplot2.\n\ntrends_states_sf &lt;- left_join(states, trends_states, by = \"state_code\")\nggplot(trends_states_sf) +\n  geom_sf(aes(fill = abd_ppy_median)) +\n  scale_fill_distiller(palette = \"RdBu\", \n                       limits = c(-1.9, 1.9),\n                       na.value = \"grey80\",\n                       direction = 1) +\n  guides(fill = guide_colorbar(title.position = \"top\", barwidth = 15)) +\n  labs(title = \"Golden Whistler state-level breeding trends 2013-2021\",\n       fill = \"Relative abundance trend [% change / year]\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nBased on these data, Golden Whistler appears to be doing best in New South Wales."
  },
  {
    "objectID": "trends.html#download",
    "href": "trends.html#download",
    "title": "2  eBird Trends Data Products",
    "section": "2.1 Downloading data",
    "text": "2.1 Downloading data\nTrends data access is granted through the same process as the eBird Status Data Products. If you haven’t already requested an API key, consult the relevant section in the Introduction to eBird Status Data Products vignette.\nTrends data can be downloaded for one or more species using ebirdst_download_trends(), where the first argument is a vector of common names, scientific names, or species codes. As with the Status Data Products, trends data will be downloaded to a centralized directory and file management and access is performed via `ebirdst. For example, let’s download the breeding season trends data for Sage Thrasher.\n\nebirdst_download_trends(\"Golden Whistler\")"
  },
  {
    "objectID": "trends.html#load",
    "href": "trends.html#load",
    "title": "2  eBird Trends Data Products",
    "section": "2.2 Loading data into R",
    "text": "2.2 Loading data into R\nOnce the data are downloaded, the trends data for a set of species, can be loaded into R using the function load_trends(). For example, we can load the Sage Thrasher trends estimates we just downloaded with:\n\ntrends_golwhi1 &lt;- load_trends(\"Golden Whistler\")\n\nEach row corresponds to the trend estimate for a 27 km by 27 km grid cell, identified by the srd_id column and with cell center given by the longitude and latitude coordinates. Columns beginning with abd_ppy provide estimates of the percent per year trend in relative abundance and 80% confidence intervals, while those beginning with abd_trend provide estimates of the cumulative trend in relative abundance and 80% confidence intervals over the time period. The abd column gives the relative abundance estimate for the middle of the trend time period (e.g. 2018 for a 2014-2022 trend). The start_year/end_year and start_date/end_date columns provide redundant information to that available in ebirdst_runs.\n\ntrends_runs %&gt;% \n  filter(common_name == \"Golden Whistler\") %&gt;% \n  select(trends_start_year, trends_end_year,\n         trends_start_date, trends_end_date)\n#&gt; # A tibble: 1 × 4\n#&gt;   trends_start_year trends_end_year trends_start_date trends_end_date\n#&gt;               &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;          \n#&gt; 1              2013            2021 12-27             02-08\n\nThis tells us that the trend estimates are for the breeding season (December 27 to February) for the period 2013-2021."
  },
  {
    "objectID": "trends.html#spatial",
    "href": "trends.html#spatial",
    "title": "2  eBird Trends Data Products",
    "section": "2.3 Conversion to spatial formats",
    "text": "2.3 Conversion to spatial formats\nThe eBird trends data are stored in a tabular format, where each row gives the trend estimate for a single cell in a 27 km by 27 km equal area grid. For each grid cell, the coordinates (longitude and latitude) are provided for the center of the grid cell. For many applications, an explicitly spatial format is more useful and these coordinates can be use to convert from the tabular format to either a vector or raster format.\n\n2.3.1 Vector (points)\nThe tabular trend data can be converted into point vector features for use with the sf package using the sf function st_as_sf().\n\ntrends_sf &lt;- st_as_sf(trends_golwhi1, \n                      coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326)\nprint(trends_sf)\n#&gt; Simple feature collection with 840 features and 15 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: 140 ymin: -43.5 xmax: 154 ymax: -15.6\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 840 × 16\n#&gt;   species_code season   start_year end_year start_date end_date srd_id     abd\n#&gt; * &lt;chr&gt;        &lt;chr&gt;         &lt;int&gt;    &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;   &lt;dbl&gt;\n#&gt; 1 golwhi1      breeding       2013     2021 12-27      02-08    662214 0.00619\n#&gt; 2 golwhi1      breeding       2013     2021 12-27      02-08    663715 0.0252 \n#&gt; 3 golwhi1      breeding       2013     2021 12-27      02-08    663716 0.0484 \n#&gt; 4 golwhi1      breeding       2013     2021 12-27      02-08    665216 0.260  \n#&gt; 5 golwhi1      breeding       2013     2021 12-27      02-08    665217 0.0246 \n#&gt; 6 golwhi1      breeding       2013     2021 12-27      02-08    665218 0.147  \n#&gt; # ℹ 834 more rows\n#&gt; # ℹ 8 more variables: abd_ppy &lt;dbl&gt;, abd_ppy_lower &lt;dbl&gt;, abd_ppy_upper &lt;dbl&gt;,\n#&gt; #   abd_ppy_nonzero &lt;lgl&gt;, abd_trend &lt;dbl&gt;, abd_trend_lower &lt;dbl&gt;,\n#&gt; #   abd_trend_upper &lt;dbl&gt;, geometry &lt;POINT [°]&gt;\n\n\n\n2.3.2 Raster\nThe tabular trend estimates can most easily be converted to raster format for use with the terra package using the function rasterize_trends(). Any of the columns in the trends data frame can be selected using the layers argument and converted into layers in the resulting raster object.\n\n# rasterize the percent per year trend with confidence limits (default)\nppy_raster &lt;- rasterize_trends(trends_golwhi1)\nprint(ppy_raster)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 117, 142, 3  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : 11769881, 15556347, -4845007, -1725169  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; names       : abd_ppy, abd_ppy_lower, abd_ppy_upper \n#&gt; min values  :   -12.7,         -16.8,         -11.1 \n#&gt; max values  :    17.7,          12.4,          21.2\n# rasterize the cumulative trend estimate\ntrends_raster &lt;- rasterize_trends(trends_golwhi1, layers = \"abd_trend\")\nprint(trends_raster)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 117, 142, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : 11769881, 15556347, -4845007, -1725169  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; name        : abd_trend \n#&gt; min value   :     -66.2 \n#&gt; max value   :     268.6\n\nA simple map of these data can be produced from the raster data. For example, we’ll make a map of percent per year change in relative abundance. Note that this is slightly different than the trends maps on the Status and Trends website, which show the cumulative trend rather than the annual trend.\n\n# define breaks and palettes similar to those on status and trends website\nbreaks &lt;- seq(-4, 4)\nbreaks[1] &lt;- -Inf\nbreaks[length(breaks)] &lt;- Inf\npal &lt;- ebirdst_palettes(length(breaks) - 1, type = \"trends\")\n\n# make a simple map\nplot(ppy_raster[[\"abd_ppy\"]], \n     col = pal, breaks =  breaks,\n     main = \"Golden Whistler breeding trend 2013-2021 [% change per year]\",\n     cex.main = 0.75,\n     axes = FALSE)"
  },
  {
    "objectID": "trends.html#uncertainty",
    "href": "trends.html#uncertainty",
    "title": "2  eBird Trends Data Products",
    "section": "2.4 Uncertainty",
    "text": "2.4 Uncertainty\nThe model used to estimate trends produces an ensemble of 100 estimates at each location, each based on a random subsample of eBird data. This ensemble of estimates is used to quantify uncertainty in the trends estimates. The estimated trend is the median across the ensemble, and the 80% confidence intervals are the lower 10th and upper 90th percentiles across the ensemble. Those wishing to access estimates from the individual folds making up the ensemble can use fold_estimates = TRUE when loading data. These fold-level estimates can be used to quantify uncertainty, for example, when calculating the trend for a given region. For example, let’s load the fold-level estimates:\n\ntrends_golwhi1_folds &lt;- load_trends(\"golwhi1\", fold_estimates = TRUE)\nprint(trends_golwhi1_folds)\n#&gt; # A tibble: 84,000 × 8\n#&gt;   species_code season    fold srd_id latitude longitude     abd abd_ppy\n#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;dbl&gt;  &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 golwhi1      breeding     1 662214    -15.6      145. 0.00619  -0.125\n#&gt; 2 golwhi1      breeding     1 663715    -15.9      145. 0.0252    5.23 \n#&gt; 3 golwhi1      breeding     1 663716    -15.9      145. 0.0484    2.77 \n#&gt; 4 golwhi1      breeding     1 665216    -16.1      145. 0.260    -0.883\n#&gt; 5 golwhi1      breeding     1 665217    -16.1      145. 0.0246    3.81 \n#&gt; 6 golwhi1      breeding     1 665218    -16.1      145. 0.147     0.640\n#&gt; # ℹ 83,994 more rows\n\nThis data frame is much more concise, only giving estimates of the mid-point relative abundance and percent per year trend in relative abundance for each of 100 folds for each grid cell."
  }
]